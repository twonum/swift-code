const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodegenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode = model.startChat({
  generationConfig: CodegenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from "lucide-react" and use it in JSX as <Heart className="" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  "projectTitle": "",\n  "explanation": "",\n  "files": {\n    "/App.js": {\n      "code": ""\n    },\n    ...\n  },\n  "generatedFiles": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file\'s code should be included in the code field, following this example:\nfiles:{\n  "/App.js": {\n    "code": "import React from \'react\';\\nimport \'./styles.css\';\\nexport default function App() {\\n  return (\\n    <div className=\'p-4 bg-gray-100 text-center\'>\\n      <h1 className=\'text-2xl font-bold text-blue-500\'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className=\'mt-2 text-gray-700\'>This is a live code editor.</p>\\n    </div>\\n  );\\n}"\n  }\n}\n  Additionally, include an explanation of the project\'s structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,"firebase","@google/generative-ai" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "projectTitle": "TaskEase: A Feature-Rich To-Do Application",\n  "explanation": "TaskEase is a comprehensive to-do application built with React and styled with Tailwind CSS. It allows users to create, manage, and prioritize their tasks efficiently. The application features multiple components for task listing, task creation, date formatting, and a graphical representation of task completion. It also incorporates icons from lucide-react to enhance user experience and uses date-fns to handle date formatting. The overall structure is designed for scalability and maintainability, with a focus on a clean and intuitive user interface.",\n  "files": {\n    "/App.js": {\n      "code": "import React, { useState, useEffect } from \'react\';\\nimport TaskList from \'./components/TaskList\';\\nimport TaskForm from \'./components/TaskForm\';\\nimport TaskGraph from \'./components/TaskGraph\';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem(\'tasks\');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem(\'tasks\', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const completedTasksCount = tasks.filter((task) => task.completed).length;\\n  const incompleteTasksCount = tasks.length - completedTasksCount;\\n\\n  const chartData = {\\n    labels: [\'Completed\', \'Incomplete\'],\\n    datasets: [\\n      {\\n        label: \'Task Completion\',\\n        data: [completedTasksCount, incompleteTasksCount],\\n        backgroundColor: [\'rgba(75, 192, 192, 0.6)\', \'rgba(255, 99, 132, 0.6)\'],\\n        borderWidth: 1,\\n      },\\n    ],\\n  };\\n\\n  return (\\n    <div className=\\"bg-gray-100 min-h-screen py-10\\">\\n      <div className=\\"container mx-auto px-4\\">\\n        <h1 className=\\"text-3xl font-bold text-center mb-8 text-blue-700\\">TaskEase: Your To-Do Companion ðŸš€</h1>\\n        <TaskForm addTask={addTask} />\\n        <TaskGraph chartData={chartData} />\\n        <TaskList tasks={tasks} deleteTask={deleteTask} toggleComplete={toggleComplete} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n"\n    },\n    "/components/TaskForm.js": {\n      "code": "import React, { useState } from \'react\';\\nimport { Plus } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\n\\nfunction TaskForm({ addTask }) {\\n  const [text, setText] = useState(\'\');\\n  const [dueDate, setDueDate] = useState(\'\');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() !== \'\') {\\n      const newTask = {\\n        id: Date.now(),\\n        text: text,\\n        completed: false,\\n        dueDate: dueDate,\\n        createdAt: format(new Date(), \'yyyy-MM-dd HH:mm:ss\')\\n      };\\n      addTask(newTask);\\n      setText(\'\');\\n      setDueDate(\'\');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\"mb-6\\">\\n      <div className=\\"flex\\">\\n        <input\\n          type=\\"text\\"\\n          className=\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mr-2\\"\\n          placeholder=\\"Add a new task...\\"\\n          value={text}\\n          onChange={(e) => setText(e.target.value)}\\n        />\\n        <input\\n          type=\\"date\\"\\n          className=\\"shadow appearance-none border rounded w-1/4 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mr-2\\"\\n          value={dueDate}\\n          onChange={(e) => setDueDate(e.target.value)}\\n        />\\n        <button\\n          type=\\"submit\\"\\n          className=\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\"\\n        >\\n          <Plus className=\\"inline-block mr-1\\" size={16} /> Add Task\\n        </button>\\n      </div>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;\\n"\n    },\n    "/components/TaskList.js": {\n      "code": "import React from \'react\';\\nimport TaskItem from \'./TaskItem\';\\n\\nfunction TaskList({ tasks, deleteTask, toggleComplete }) {\\n  return (\\n    <div>\\n      {tasks.length === 0 ? (\\n        <p className=\\"text-center text-gray-500\\">No tasks yet. Add one!</p>\\n      ) : (\\n        <ul>\\n          {tasks.map((task) => (\\n            <TaskItem\\n              key={task.id}\\n              task={task}\\n              deleteTask={deleteTask}\\n              toggleComplete={toggleComplete}\\n            />\\n          ))}\\n        </ul>\\n      )}\\n    </div>\\n  );\\n}\\n\\nexport default TaskList;\\n"\n    },\n    "/components/TaskItem.js": {\n      "code": "import React from \'react\';\\nimport { Trash, Edit, Check, X } from \'lucide-react\';\\nimport { format } from \'date-fns\';\\n\\nfunction TaskItem({ task, deleteTask, toggleComplete }) {\\n  return (\\n    <li className=\\"flex items-center justify-between py-2 px-4 bg-white rounded shadow mb-2\\">\\n      <div>\\n        <input\\n          type=\\"checkbox\\"\\n          id={`task-${task.id}`}\\n          checked={task.completed}\\n          onChange={() => toggleComplete(task.id)}\\n          className=\\"mr-2 leading-tight\\"\\n        />\\n        <label htmlFor={`task-${task.id}`} className={`text-gray-700 text-base ${task.completed ? \'line-through text-gray-500\' : \'\'}`}>\\n          {task.text}\\n        </label>\\n        {task.dueDate && (\\n          <div className=\\"text-sm text-gray-500\\">\\n            Due: {format(new Date(task.dueDate), \'MMM dd, yyyy\')}\\n          </div>\\n        )}\\n\\n      </div>\\n      <div>\\n        <button onClick={() => deleteTask(task.id)} className=\\"hover:bg-red-100 text-red-500 hover:text-red-700 p-2 rounded-full focus:outline-none focus:shadow-outline\\">\\n          <Trash className=\\"h-4 w-4\\"/>\\n        </button>\\n\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default TaskItem;\\n"\n    },\n    "/components/TaskGraph.js": {\n      "code": "import React from \'react\';\\nimport { Pie } from \'react-chartjs-2\';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \'chart.js\';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction TaskGraph({ chartData }) {\\n  const options = {\\n    responsive: true,\\n    maintainAspectRatio: false,\\n  };\\n\\n  return (\\n    <div className=\\"w-full md:w-1/2 mx-auto h-64\\">\\n      <Pie data={chartData} options={options} />\\n    </div>\\n  );\\n}\\n\\nexport default TaskGraph;\\n"\n    }\n  },\n  "generatedFiles": [\n    "/App.js",\n    "/components/TaskForm.js",\n    "/components/TaskList.js",\n    "/components/TaskItem.js",\n    "/components/TaskGraph.js"\n  ]\n}\n```',
        },
      ],
    },
  ],
});
